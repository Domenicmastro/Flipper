{
  "stats": {
    "suites": 3,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-02T02:09:08.433Z",
    "end": "2025-08-02T02:09:19.100Z",
    "duration": 10667,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "88ad31bc-bede-4f72-8323-a5bb53eb5110",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 2,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Initialize Firebase Admin SDK (only once)\nif (!getAdminApps().length) {\n    initAdminApp({\n        credential: cert(path.join(__dirname, \"../config/firebase-service-account.json\")),\n        projectId: \"flipper-ae6d1\",\n    });\n    console.log(\"âœ… Firebase Admin SDK initialized\");\n}",
          "err": {},
          "uuid": "8463f237-0eae-4443-b999-ffd948d59c1e",
          "parentUUID": "88ad31bc-bede-4f72-8323-a5bb53eb5110",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 6,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Clean up Admin SDK apps\nfor (const app of getAdminApps()) {\n    await deleteApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Admin SDK apps deleted\");\n// Delete Firebase Client SDK apps\nfor (const app of getClientApps()) {\n    await deleteClientApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Client SDK apps deleted\");",
          "err": {},
          "uuid": "ba5fabef-f918-40af-a799-1e313a32d38e",
          "parentUUID": "88ad31bc-bede-4f72-8323-a5bb53eb5110",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
          "title": "Testing product functionality through API routes",
          "fullFile": "/app/src/backend/tests/integration/api-products.test.ts",
          "file": "/src/backend/tests/integration/api-products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"before each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 91,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "7fa04c5a-fb26-448a-adb7-b955b2786aec",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"after each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "b737c809-d616-41cb-b25c-8197867d226e",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add product",
              "fullTitle": "Testing product functionality through API routes should add product",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testProductNew = {\n    name: \"Another Test Chair\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n};\nconst res = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst newProduct = res.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nexpect(newProduct.name).to.equal(\"Another Test Chair\");\nexpect(newProduct.createdAt).to.exist;\nexpect(newProduct.updatedAt).to.exist;\nexpect(newProduct.id).to.exist;",
              "err": {},
              "uuid": "1b6653d4-b21c-4532-8102-79b0803fe3ab",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through API routes should fetch all products",
              "timedOut": false,
              "duration": 1352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(\"/api/products\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "7b5d9e4d-05b6-4cb7-98d6-4364e09164a9",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get product by product ID",
              "fullTitle": "Testing product functionality through API routes should get product by product ID",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(res.status).to.equal(200);\nconst fetchedProduct = res.body;\nexpect(fetchedProduct).to.exist;\nexpect(fetchedProduct.id).to.equal(productId);",
              "err": {},
              "uuid": "b6aa737f-632e-4ef1-b2e3-938b47768a14",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by category ID",
              "fullTitle": "Testing product functionality through API routes should get products by category ID",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-category/${testCategoryId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "4b5e0f86-0c48-4888-86d0-50ef0e33aa6a",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by seller ID",
              "fullTitle": "Testing product functionality through API routes should get products by seller ID",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-seller-id/${testProduct.sellerId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "342b73c2-1daa-4431-8fe9-cacf5cdc8565",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by tag",
              "fullTitle": "Testing product functionality through API routes should get products by tag",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tag = testProduct.tags[0];\nconst res = await request(app).get(`/api/products/by-tag/${tag}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "47677d14-e5ce-4910-94bf-168a01a6cbd8",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search product by 'chair'",
              "fullTitle": "Testing product functionality through API routes should search product by 'chair'",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get(\"/api/products/search-products\")\n    .query({ input: \"chair\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nconst found = res.body.some((p) => p.name.toLowerCase().includes(\"chair\"));\nexpect(found).to.be.true;",
              "err": {},
              "uuid": "b3f37fcc-c367-4e22-94d1-e8e34adce4cd",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update price and status",
              "fullTitle": "Testing product functionality through API routes should update price and status",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { updates: { status: \"Sold\", price: 3.99 } };\nconst res = await request(app)\n    .patch(`/api/products/by-id/${productId}`)\n    .send(updates)\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst updatedProduct = res.body;\nexpect(updatedProduct.price).to.equal(3.99);\nexpect(updatedProduct.status).to.equal(\"Sold\");",
              "err": {},
              "uuid": "ac1cbe45-3fa5-4b19-a6f0-f62081fac7cb",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through API routes should delete product",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"product ID (test): \", productId);\nconst deleteRes = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes.status).to.equal(204);\nconst getRes = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(getRes.status).to.equal(404);",
              "err": {},
              "uuid": "bb9dcdc2-7e42-4832-ace9-821f889e26d2",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete same product twice",
              "fullTitle": "Testing product functionality through API routes should fail to delete same product twice",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First delete\nconst deleteRes1 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes1.status).to.equal(204);\nconst deleteRes2 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes2.status).to.equal(404);",
              "err": {},
              "uuid": "7d897d5c-9ed6-4893-a6cf-8481c8a5a998",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place bid on auctioned item",
              "fullTitle": "Testing product functionality through API routes should place bid on auctioned item",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 0.0,\n    bidCount: 0,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nconst resBid = await request(app)\n    .post(`/api/bids/${newProduct.id}/bid`)\n    .send({\n    amount: 50.0,\n    userId: \"user123\",\n})\n    .set(\"Accept\", \"application/json\");\nexpect(resBid.status).to.equal(200);\nconst auctionedProduct = resBid.body;\nif (!auctionedProduct) {\n    throw new Error(\"Auctioned product should exist!\");\n}\nexpect(auctionedProduct.currentBid).to.equal(50.0);\nexpect(auctionedProduct.bidderId).to.equal(\"user123\");\nexpect(auctionedProduct.bidCount).to.equal(1);",
              "err": {},
              "uuid": "aaeae919-ee61-4443-8b52-d2c92f5a7850",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid less than current bid",
              "fullTitle": "Testing product functionality through API routes should not be able to bid less than current bid",
              "timedOut": false,
              "duration": 159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 60.0,\n    bidCount: 3,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "fd03b8b7-8114-4e88-8c34-5e3e3aa8ec18",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid on non-auctionable product",
              "fullTitle": "Testing product functionality through API routes should not be able to bid on non-auctionable product",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: false,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "e5202d42-9069-4636-bbf4-2c834e1f97c6",
              "parentUUID": "5988cc11-14bc-4336-bff9-0edf36cc22f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b6653d4-b21c-4532-8102-79b0803fe3ab",
            "7b5d9e4d-05b6-4cb7-98d6-4364e09164a9",
            "b6aa737f-632e-4ef1-b2e3-938b47768a14",
            "4b5e0f86-0c48-4888-86d0-50ef0e33aa6a",
            "342b73c2-1daa-4431-8fe9-cacf5cdc8565",
            "47677d14-e5ce-4910-94bf-168a01a6cbd8",
            "b3f37fcc-c367-4e22-94d1-e8e34adce4cd",
            "ac1cbe45-3fa5-4b19-a6f0-f62081fac7cb",
            "bb9dcdc2-7e42-4832-ace9-821f889e26d2",
            "7d897d5c-9ed6-4893-a6cf-8481c8a5a998",
            "aaeae919-ee61-4443-8b52-d2c92f5a7850",
            "fd03b8b7-8114-4e88-8c34-5e3e3aa8ec18",
            "e5202d42-9069-4636-bbf4-2c834e1f97c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2759,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
          "title": "User Routes (with auth)",
          "fullFile": "/app/src/backend/tests/integration/api-user.test.ts",
          "file": "/src/backend/tests/integration/api-user.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"before all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 1083,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nif (!getAdminApps().length) {\n    // Only initialize if not initialized yet, with projectId here if you want\n    initAdminApp({\n        credential: cert(path.join(__dirname, \"../config/firebase-service-account.json\")),\n        projectId: \"flipper-ae6d1\",\n    });\n}\nconst adminAuth = admin.auth();\nconst userRecord = await adminAuth.createUser({\n    email: testUser.email,\n    password: \"testpassword\",\n    displayName: testUser.name,\n});\ntestUserId = userRecord.uid;\ntestUser.id = testUserId;\nconst customToken = await adminAuth.createCustomToken(testUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ token: customToken, returnSecureToken: true }),\n});\nconst data = (await response.json());\nidToken = data.idToken;",
              "err": {},
              "uuid": "0f28839e-d5b2-4c70-be73-7846872a6187",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"after all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 541,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (createdUserId)\n    await admin.auth().deleteUser(createdUserId).catch(console.error);\nif (testUserId)\n    await admin.auth().deleteUser(testUserId).catch(console.error);",
              "err": {},
              "uuid": "41daf215-e80c-4f20-98c0-72f3c63b4745",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a user (POST /users) with auth",
              "fullTitle": "User Routes (with auth) should create a user (POST /users) with auth",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ user: testUser });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);\ncreatedUserId = res.body.id;",
              "err": {},
              "uuid": "81ce8dd4-28f3-432e-a4e7-64121ff0abc7",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by id (PUT /users/get-or-create/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get user by id (PUT /users/get-or-create/:userId) without auth",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).put(`/api/users/get-or-create/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);",
              "err": {},
              "uuid": "50d9384a-7692-4733-9577-0b9b51b491f1",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user info (PATCH /users/by-id/:userId) with auth",
              "fullTitle": "User Routes (with auth) should update user info (PATCH /users/by-id/:userId) with auth",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Updated bio\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ updates });\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "66b5ba7d-45ba-4e84-8aba-ad559c2da4ef",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT update user info with invalid auth",
              "fullTitle": "User Routes (with auth) should NOT update user info with invalid auth",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Fail update\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer invalidtoken`)\n    .send({ updates });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "13a3d200-b699-47ba-99a9-36e0404720f5",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "fullTitle": "User Routes (with auth) should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dummyProductId = \"dummy-product-id\";\nconst res = await request(app)\n    .put(`/api/users/wishlist/by-user-and-product-id/${testUserId}/${dummyProductId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "49e71a66-aaf1-4409-9c05-4f95984884ae",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/users/wishlist/by-user-id/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "87fa871e-4b38-4459-b96c-2b49d843fee6",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user (DELETE /users) with auth",
              "fullTitle": "User Routes (with auth) should delete user (DELETE /users) with auth",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "fd537b4b-dbba-4bd0-9c2a-c1fb56104393",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user (DELETE /users) without auth",
              "fullTitle": "User Routes (with auth) should not delete user (DELETE /users) without auth",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const res = await request(app).delete(\"/api/users\");\n    expect(res.status).to.equal(403);\n}\ncatch (error) {\n    // pass\n}",
              "err": {},
              "uuid": "bf8e6e87-f350-42aa-ab02-7cad56f76756",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get recommendations for user",
              "fullTitle": "User Routes (with auth) should get recommendations for user",
              "timedOut": false,
              "duration": 1144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const thisTestUserId = \"user_001\";\nconst adminAuth = admin.auth();\nconst customToken = await adminAuth.createCustomToken(thisTestUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n        token: customToken,\n        returnSecureToken: true,\n    }),\n});\nconst data = (await response.json());\nconst thisCustomToken = data.idToken;\n// const thisCustomToken =\n// \t\"eyJhbGciOiJSUzI1NiIsImtpZCI6ImE4ZGY2MmQzYTBhNDRlM2RmY2RjYWZjNmRhMTM4Mzc3NDU5ZjliMDEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiQWxpY2UgSm9obnNvbiIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS9mbGlwcGVyLWFlNmQxIiwiYXVkIjoiZmxpcHBlci1hZTZkMSIsImF1dGhfdGltZSI6MTc1Mjg3NjgyNywidXNlcl9pZCI6InVzZXJfMDAxIiwic3ViIjoidXNlcl8wMDEiLCJpYXQiOjE3NTI4NzY4MjcsImV4cCI6MTc1Mjg4MDQyNywiZW1haWwiOiJhbGljZS5qb2huc29uQGV4YW1wbGUuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbImFsaWNlLmpvaG5zb25AZXhhbXBsZS5jb20iXX0sInNpZ25faW5fcHJvdmlkZXIiOiJwYXNzd29yZCJ9fQ.xpOIqJEsowtlGaT3A1eFAADMsVrphiySw1lUocmOSd_a2EGBNaUBG0Mc1qDbWFBeJU_0LlvSg0U37c8Gg_DA9j8IRSfS62IDFoAtqQuS5zzAC1Z6sBIqxDQKF71xK-mYlLnzcom8S1rY_mX5JWC0wEkIEcpulw3X2WQzXS2tGiJZnEDeYUxtxRQgIth1SukJssd1vqmjttdsZrCf_h_lTpha5BTPVBHmiJNSPUZYm_2Fnq3iMD_YUr4c8Bx4xuHTJT88DjnjyK3du2B2mnx0QRjn8YMVcNBAGhWoAyKrt46TBd7WNFDOdOyldir4NfhrMLLD7WB8ZmUW83NLytwqvw\";\ntry {\n    const res = await request(app)\n        .get(`/api/recommendations/${thisTestUserId}`)\n        .set(\"Authorization\", `Bearer ${thisCustomToken}`);\n    expect(res.status).to.equal(200);\n}\ncatch (_err) {\n    throw new Error(\"this shouldn't happen :(\");\n}",
              "err": {},
              "uuid": "53bffe1b-fd34-4efa-847d-5f96a86a46cf",
              "parentUUID": "ba5bd0aa-f2c7-4f4f-a999-49e5e6dd2d67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81ce8dd4-28f3-432e-a4e7-64121ff0abc7",
            "50d9384a-7692-4733-9577-0b9b51b491f1",
            "66b5ba7d-45ba-4e84-8aba-ad559c2da4ef",
            "13a3d200-b699-47ba-99a9-36e0404720f5",
            "49e71a66-aaf1-4409-9c05-4f95984884ae",
            "87fa871e-4b38-4459-b96c-2b49d843fee6",
            "fd537b4b-dbba-4bd0-9c2a-c1fb56104393",
            "bf8e6e87-f350-42aa-ab02-7cad56f76756",
            "53bffe1b-fd34-4efa-847d-5f96a86a46cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
          "title": "Testing product functionality through firebase directly",
          "fullFile": "/app/src/backend/tests/integration/firebase-product.test.ts",
          "file": "/src/backend/tests/integration/firebase-product.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"before each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 62,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "e013f15a-e4cc-429d-aa36-2fd04844e810",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"after each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "cec6803a-f78f-4b3d-8618-22d4eb254ae9",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add a product",
              "fullTitle": "Testing product functionality through firebase directly should add a product",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    expect(productId).to.exist;\n}\ncatch (err) {\n    throw new Error(`Error adding product: ${err.message}`);\n}",
              "err": {},
              "uuid": "2b6c1204-ce74-425d-a58c-bfef35273307",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch product by ID",
              "fullTitle": "Testing product functionality through firebase directly should fetch product by ID",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    let fetchedProduct = await getProductById(productId);\n    expect(fetchedProduct).to.exist;\n    expect(fetchedProduct.name).to.equal(testProduct.name);\n}\ncatch (err) {\n    throw new Error(`Error fetching by ID: ${err.message}`);\n}",
              "err": {},
              "uuid": "457d5bc6-b9fb-4965-8e15-5cb1c9c888e4",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through firebase directly should fetch all products",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const product2 = await addProduct(testProduct);\n    const productId2 = product2.id;\n    productIds.push(productId2);\n    const products = await getAllProducts();\n    expect(products).to.be.an(\"array\");\n    expect(products.length).to.be.gte(2);\n}\ncatch (err) {\n    throw new Error(`Error fetching all products: ${err.message}`);\n}",
              "err": {},
              "uuid": "8df66665-597a-4447-8823-81e620108d36",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search products with 'chair'",
              "fullTitle": "Testing product functionality through firebase directly should search products with 'chair'",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const results = await searchProducts(\"chair\");\n    expect(results).to.be.an(\"array\");\n    expect(results.some((p) => p.name.toLowerCase().includes(\"chair\"))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error searching products: ${err.message}`);\n}",
              "err": {},
              "uuid": "c6b7cd42-4369-47f2-9b3e-73aa1421466c",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products in category 'Accessories'",
              "fullTitle": "Testing product functionality through firebase directly should get products in category 'Accessories'",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const products = await getProductsInCategory(testCategoryId);\n    expect(products).to.be.an(\"array\");\n    expect(products.some((p) => p.categories.includes(testCategoryId))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error fetching products in category: ${err.message}`);\n}",
              "err": {},
              "uuid": "d88d79c0-3add-4310-bdf3-108259d854e5",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product price",
              "fullTitle": "Testing product functionality through firebase directly should update product price",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { price: 59.99 });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.price).to.equal(59.99);\n}\ncatch (err) {\n    throw new Error(`Error updating price: ${err.message}`);\n}",
              "err": {},
              "uuid": "fc384734-d769-4e58-a936-1754e95fcbc8",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product status",
              "fullTitle": "Testing product functionality through firebase directly should update product status",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { status: \"Sold\" });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.status).to.equal(\"Sold\");\n}\ncatch (err) {\n    throw new Error(`Error updating status: ${err.message}`);\n}",
              "err": {},
              "uuid": "183c63b9-2c80-4ecf-9961-5bc93d2aaf43",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through firebase directly should delete product",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(productId).to.exist;\nawait deleteProduct(productId);\ntry {\n    await getProductById(productId);\n    throw new Error(\"Product still exists after deletion\");\n}\ncatch (err) {\n    expect(err.message).to.include(\"Product not found\");\n}",
              "err": {},
              "uuid": "b65e8ea3-aa66-4ed1-aff1-423250641763",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete the same product again",
              "fullTitle": "Testing product functionality through firebase directly should fail to delete the same product again",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await deleteProduct(productId);\n    throw new Error(\"Expected deleteProduct to throw, but it succeeded\");\n}\ncatch (error) {\n    expect(error).to.exist;\n}",
              "err": {},
              "uuid": "f3fd5c93-8f0b-44c7-9b2b-22686fd5acff",
              "parentUUID": "c4bbdf11-bfe2-426e-b676-98eee6a7f7be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b6c1204-ce74-425d-a58c-bfef35273307",
            "457d5bc6-b9fb-4965-8e15-5cb1c9c888e4",
            "8df66665-597a-4447-8823-81e620108d36",
            "c6b7cd42-4369-47f2-9b3e-73aa1421466c",
            "d88d79c0-3add-4310-bdf3-108259d854e5",
            "fc384734-d769-4e58-a936-1754e95fcbc8",
            "183c63b9-2c80-4ecf-9961-5bc93d2aaf43",
            "b65e8ea3-aa66-4ed1-aff1-423250641763",
            "f3fd5c93-8f0b-44c7-9b2b-22686fd5acff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}