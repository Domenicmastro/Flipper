{
  "stats": {
    "suites": 3,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-23T22:27:20.989Z",
    "end": "2025-08-23T22:27:30.806Z",
    "duration": 9817,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "41ebd11f-b022-47c3-94f1-5a2c6eb37012",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Initialize Firebase Admin SDK (only once)\nif (!getAdminApps().length) {\n    initAdminApp({\n        credential: cert(path.join(__dirname, \"../config/firebase-service-account.json\")),\n        projectId: \"flipper-ae6d1\",\n    });\n    console.log(\"âœ… Firebase Admin SDK initialized\");\n}",
          "err": {},
          "uuid": "f971fdd4-2bdf-44eb-a0d3-4b8420a80790",
          "parentUUID": "41ebd11f-b022-47c3-94f1-5a2c6eb37012",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 8,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Clean up Admin SDK apps\nfor (const app of getAdminApps()) {\n    await deleteApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Admin SDK apps deleted\");\n// Delete Firebase Client SDK apps\nfor (const app of getClientApps()) {\n    await deleteClientApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Client SDK apps deleted\");",
          "err": {},
          "uuid": "2bd0bf42-d410-4d9b-a61b-ba411d081052",
          "parentUUID": "41ebd11f-b022-47c3-94f1-5a2c6eb37012",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
          "title": "Testing product functionality through API routes",
          "fullFile": "/app/src/backend/tests/integration/api-products.test.ts",
          "file": "/src/backend/tests/integration/api-products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"before each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 74,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "d74194af-d042-49b6-a6c5-18b62ef0e552",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"after each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 82,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "da9c389f-e28f-4468-b23f-cb41aa99b81e",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add product",
              "fullTitle": "Testing product functionality through API routes should add product",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testProductNew = {\n    name: \"Another Test Chair\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n};\nconst res = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst newProduct = res.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nexpect(newProduct.name).to.equal(\"Another Test Chair\");\nexpect(newProduct.createdAt).to.exist;\nexpect(newProduct.updatedAt).to.exist;\nexpect(newProduct.id).to.exist;",
              "err": {},
              "uuid": "c8713dc0-080f-49df-b020-3f41d319cda1",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through API routes should fetch all products",
              "timedOut": false,
              "duration": 328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(\"/api/products\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "97104c0f-cbf1-4316-a6e5-61edf8213d58",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get product by product ID",
              "fullTitle": "Testing product functionality through API routes should get product by product ID",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(res.status).to.equal(200);\nconst fetchedProduct = res.body;\nexpect(fetchedProduct).to.exist;\nexpect(fetchedProduct.id).to.equal(productId);",
              "err": {},
              "uuid": "152d987e-7fd3-40ab-885d-98c5c5622c77",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by category ID",
              "fullTitle": "Testing product functionality through API routes should get products by category ID",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-category/${testCategoryId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "acf56925-34b9-49e8-8492-306cc5e39539",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by seller ID",
              "fullTitle": "Testing product functionality through API routes should get products by seller ID",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-seller-id/${testProduct.sellerId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "3fedcf11-edc1-4b2a-aaf7-8a55e67d75d6",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by tag",
              "fullTitle": "Testing product functionality through API routes should get products by tag",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tag = testProduct.tags[0];\nconst res = await request(app).get(`/api/products/by-tag/${tag}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "5bb1f25b-18d0-40cc-a38a-80120e6ac39a",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search product by 'chair'",
              "fullTitle": "Testing product functionality through API routes should search product by 'chair'",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get(\"/api/products/search-products\")\n    .query({ input: \"chair\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nconst found = res.body.some((p) => p.name.toLowerCase().includes(\"chair\"));\nexpect(found).to.be.true;",
              "err": {},
              "uuid": "cbabd6de-b917-4929-bb5a-2a2f782aec79",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update price and status",
              "fullTitle": "Testing product functionality through API routes should update price and status",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { updates: { status: \"Sold\", price: 3.99 } };\nconst res = await request(app)\n    .patch(`/api/products/by-id/${productId}`)\n    .send(updates)\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst updatedProduct = res.body;\nexpect(updatedProduct.price).to.equal(3.99);\nexpect(updatedProduct.status).to.equal(\"Sold\");",
              "err": {},
              "uuid": "15cccbe1-b408-48a6-963c-75f059c2fbeb",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through API routes should delete product",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"product ID (test): \", productId);\nconst deleteRes = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes.status).to.equal(204);\nconst getRes = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(getRes.status).to.equal(404);",
              "err": {},
              "uuid": "d006e7f5-8253-47e5-ac9d-b70e43af360d",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete same product twice",
              "fullTitle": "Testing product functionality through API routes should fail to delete same product twice",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First delete\nconst deleteRes1 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes1.status).to.equal(204);\nconst deleteRes2 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes2.status).to.equal(404);",
              "err": {},
              "uuid": "ab5178f5-5cdb-40ac-8910-a109ca365942",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place bid on auctioned item",
              "fullTitle": "Testing product functionality through API routes should place bid on auctioned item",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 0.0,\n    bidCount: 0,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nconst resBid = await request(app)\n    .post(`/api/bids/${newProduct.id}/bid`)\n    .send({\n    amount: 50.0,\n    userId: \"user123\",\n})\n    .set(\"Accept\", \"application/json\");\nexpect(resBid.status).to.equal(200);\nconst auctionedProduct = resBid.body;\nif (!auctionedProduct) {\n    throw new Error(\"Auctioned product should exist!\");\n}\nexpect(auctionedProduct.currentBid).to.equal(50.0);\nexpect(auctionedProduct.bidderId).to.equal(\"user123\");\nexpect(auctionedProduct.bidCount).to.equal(1);",
              "err": {},
              "uuid": "db82b11e-88d3-4590-87f5-1bda3136c26c",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid less than current bid",
              "fullTitle": "Testing product functionality through API routes should not be able to bid less than current bid",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 60.0,\n    bidCount: 3,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "38523b80-74d9-4545-b789-50561f79c044",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid on non-auctionable product",
              "fullTitle": "Testing product functionality through API routes should not be able to bid on non-auctionable product",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: false,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "4991e17e-4b57-4b1e-aba6-77be4e20cd35",
              "parentUUID": "50bb0a49-83ff-49e1-9ba1-8c59134a3939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8713dc0-080f-49df-b020-3f41d319cda1",
            "97104c0f-cbf1-4316-a6e5-61edf8213d58",
            "152d987e-7fd3-40ab-885d-98c5c5622c77",
            "acf56925-34b9-49e8-8492-306cc5e39539",
            "3fedcf11-edc1-4b2a-aaf7-8a55e67d75d6",
            "5bb1f25b-18d0-40cc-a38a-80120e6ac39a",
            "cbabd6de-b917-4929-bb5a-2a2f782aec79",
            "15cccbe1-b408-48a6-963c-75f059c2fbeb",
            "d006e7f5-8253-47e5-ac9d-b70e43af360d",
            "ab5178f5-5cdb-40ac-8910-a109ca365942",
            "db82b11e-88d3-4590-87f5-1bda3136c26c",
            "38523b80-74d9-4545-b789-50561f79c044",
            "4991e17e-4b57-4b1e-aba6-77be4e20cd35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
          "title": "User Routes (with auth)",
          "fullFile": "/app/src/backend/tests/integration/api-user.test.ts",
          "file": "/src/backend/tests/integration/api-user.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"before all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 1157,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nif (!getAdminApps().length) {\n    // Only initialize if not initialized yet, with projectId here if you want\n    initAdminApp({\n        credential: cert(path.join(__dirname, \"../config/firebase-service-account.json\")),\n        projectId: \"flipper-ae6d1\",\n    });\n}\nconst adminAuth = admin.auth();\nconst userRecord = await adminAuth.createUser({\n    email: testUser.email,\n    password: \"testpassword\",\n    displayName: testUser.name,\n});\ntestUserId = userRecord.uid;\ntestUser.id = testUserId;\nconst customToken = await adminAuth.createCustomToken(testUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ token: customToken, returnSecureToken: true }),\n});\nconst data = (await response.json());\nidToken = data.idToken;",
              "err": {},
              "uuid": "f8432ed7-49b9-493d-80b5-2e87baf30f41",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"after all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 602,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (createdUserId)\n    await admin.auth().deleteUser(createdUserId).catch(console.error);\nif (testUserId)\n    await admin.auth().deleteUser(testUserId).catch(console.error);",
              "err": {},
              "uuid": "81d5fbfa-bea5-48f4-9bea-524e7d5a29d9",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a user (POST /users) with auth",
              "fullTitle": "User Routes (with auth) should create a user (POST /users) with auth",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ user: testUser });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);\ncreatedUserId = res.body.id;",
              "err": {},
              "uuid": "d7f5c836-df0b-4fcb-97f0-0c55c47d5df7",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by id (PUT /users/get-or-create/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get user by id (PUT /users/get-or-create/:userId) without auth",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).put(`/api/users/get-or-create/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);",
              "err": {},
              "uuid": "d3e3b917-4527-423c-b1d4-7a11f7ac9041",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user info (PATCH /users/by-id/:userId) with auth",
              "fullTitle": "User Routes (with auth) should update user info (PATCH /users/by-id/:userId) with auth",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Updated bio\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ updates });\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "e304640c-691e-4f30-8c5d-ff6eacc66562",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT update user info with invalid auth",
              "fullTitle": "User Routes (with auth) should NOT update user info with invalid auth",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Fail update\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer invalidtoken`)\n    .send({ updates });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "79bc1563-9ba0-4c2c-b32c-3a7f76367712",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "fullTitle": "User Routes (with auth) should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dummyProductId = \"dummy-product-id\";\nconst res = await request(app)\n    .put(`/api/users/wishlist/by-user-and-product-id/${testUserId}/${dummyProductId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "732d8015-d591-4137-95a3-8b92aed1daac",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/users/wishlist/by-user-id/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "25a8f7bf-24e7-461d-8f9f-28f8695f4a7e",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user (DELETE /users) with auth",
              "fullTitle": "User Routes (with auth) should delete user (DELETE /users) with auth",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "de928b85-4171-42b3-95f2-08d390fe8495",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user (DELETE /users) without auth",
              "fullTitle": "User Routes (with auth) should not delete user (DELETE /users) without auth",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const res = await request(app).delete(\"/api/users\");\n    expect(res.status).to.equal(403);\n}\ncatch (error) {\n    // pass\n}",
              "err": {},
              "uuid": "a234bbe2-5aa0-4212-b643-a8a856f25638",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get recommendations for user",
              "fullTitle": "User Routes (with auth) should get recommendations for user",
              "timedOut": false,
              "duration": 1337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const thisTestUserId = \"user_001\";\nconst adminAuth = admin.auth();\nconst customToken = await adminAuth.createCustomToken(thisTestUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n        token: customToken,\n        returnSecureToken: true,\n    }),\n});\nconst data = (await response.json());\nconst thisCustomToken = data.idToken;\n// const thisCustomToken =\n// \t\"eyJhbGciOiJSUzI1NiIsImtpZCI6ImE4ZGY2MmQzYTBhNDRlM2RmY2RjYWZjNmRhMTM4Mzc3NDU5ZjliMDEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiQWxpY2UgSm9obnNvbiIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS9mbGlwcGVyLWFlNmQxIiwiYXVkIjoiZmxpcHBlci1hZTZkMSIsImF1dGhfdGltZSI6MTc1Mjg3NjgyNywidXNlcl9pZCI6InVzZXJfMDAxIiwic3ViIjoidXNlcl8wMDEiLCJpYXQiOjE3NTI4NzY4MjcsImV4cCI6MTc1Mjg4MDQyNywiZW1haWwiOiJhbGljZS5qb2huc29uQGV4YW1wbGUuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbImFsaWNlLmpvaG5zb25AZXhhbXBsZS5jb20iXX0sInNpZ25faW5fcHJvdmlkZXIiOiJwYXNzd29yZCJ9fQ.xpOIqJEsowtlGaT3A1eFAADMsVrphiySw1lUocmOSd_a2EGBNaUBG0Mc1qDbWFBeJU_0LlvSg0U37c8Gg_DA9j8IRSfS62IDFoAtqQuS5zzAC1Z6sBIqxDQKF71xK-mYlLnzcom8S1rY_mX5JWC0wEkIEcpulw3X2WQzXS2tGiJZnEDeYUxtxRQgIth1SukJssd1vqmjttdsZrCf_h_lTpha5BTPVBHmiJNSPUZYm_2Fnq3iMD_YUr4c8Bx4xuHTJT88DjnjyK3du2B2mnx0QRjn8YMVcNBAGhWoAyKrt46TBd7WNFDOdOyldir4NfhrMLLD7WB8ZmUW83NLytwqvw\";\ntry {\n    const res = await request(app)\n        .get(`/api/recommendations/${thisTestUserId}`)\n        .set(\"Authorization\", `Bearer ${thisCustomToken}`);\n    expect(res.status).to.equal(200);\n}\ncatch (_err) {\n    throw new Error(\"this shouldn't happen :(\");\n}",
              "err": {},
              "uuid": "64eca21c-e082-422c-8323-11608a65d98a",
              "parentUUID": "81c25c5e-ba12-461d-9dc9-d5d6b973b052",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7f5c836-df0b-4fcb-97f0-0c55c47d5df7",
            "d3e3b917-4527-423c-b1d4-7a11f7ac9041",
            "e304640c-691e-4f30-8c5d-ff6eacc66562",
            "79bc1563-9ba0-4c2c-b32c-3a7f76367712",
            "732d8015-d591-4137-95a3-8b92aed1daac",
            "25a8f7bf-24e7-461d-8f9f-28f8695f4a7e",
            "de928b85-4171-42b3-95f2-08d390fe8495",
            "a234bbe2-5aa0-4212-b643-a8a856f25638",
            "64eca21c-e082-422c-8323-11608a65d98a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1787,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
          "title": "Testing product functionality through firebase directly",
          "fullFile": "/app/src/backend/tests/integration/firebase-product.test.ts",
          "file": "/src/backend/tests/integration/firebase-product.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"before each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 80,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "5c7d71e0-e79b-48c6-b361-e5c56d9056d1",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"after each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "0de0af63-cdda-41dc-a136-7b6cd728b093",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add a product",
              "fullTitle": "Testing product functionality through firebase directly should add a product",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    expect(productId).to.exist;\n}\ncatch (err) {\n    throw new Error(`Error adding product: ${err.message}`);\n}",
              "err": {},
              "uuid": "3af15b8e-e222-40ed-97b0-d73b03f2582f",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch product by ID",
              "fullTitle": "Testing product functionality through firebase directly should fetch product by ID",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    let fetchedProduct = await getProductById(productId);\n    expect(fetchedProduct).to.exist;\n    expect(fetchedProduct.name).to.equal(testProduct.name);\n}\ncatch (err) {\n    throw new Error(`Error fetching by ID: ${err.message}`);\n}",
              "err": {},
              "uuid": "8e73b681-ebff-4791-98ab-087ae28b11f4",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through firebase directly should fetch all products",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const product2 = await addProduct(testProduct);\n    const productId2 = product2.id;\n    productIds.push(productId2);\n    const products = await getAllProducts();\n    expect(products).to.be.an(\"array\");\n    expect(products.length).to.be.gte(2);\n}\ncatch (err) {\n    throw new Error(`Error fetching all products: ${err.message}`);\n}",
              "err": {},
              "uuid": "eaf1d91f-1a50-4657-bfbd-426e718924c6",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search products with 'chair'",
              "fullTitle": "Testing product functionality through firebase directly should search products with 'chair'",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const results = await searchProducts(\"chair\");\n    expect(results).to.be.an(\"array\");\n    expect(results.some((p) => p.name.toLowerCase().includes(\"chair\"))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error searching products: ${err.message}`);\n}",
              "err": {},
              "uuid": "2d31557a-75d0-4ef6-8a26-557a7694cd86",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products in category 'Accessories'",
              "fullTitle": "Testing product functionality through firebase directly should get products in category 'Accessories'",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const products = await getProductsInCategory(testCategoryId);\n    expect(products).to.be.an(\"array\");\n    expect(products.some((p) => p.categories.includes(testCategoryId))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error fetching products in category: ${err.message}`);\n}",
              "err": {},
              "uuid": "d04fa11d-b3cd-4ff4-b075-ee3740c08acb",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product price",
              "fullTitle": "Testing product functionality through firebase directly should update product price",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { price: 59.99 });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.price).to.equal(59.99);\n}\ncatch (err) {\n    throw new Error(`Error updating price: ${err.message}`);\n}",
              "err": {},
              "uuid": "62a5559d-9b3a-4bb0-847b-0e1c7baabfbd",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product status",
              "fullTitle": "Testing product functionality through firebase directly should update product status",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { status: \"Sold\" });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.status).to.equal(\"Sold\");\n}\ncatch (err) {\n    throw new Error(`Error updating status: ${err.message}`);\n}",
              "err": {},
              "uuid": "b24099fa-cc66-45e6-a4e0-ac7f8e1a72db",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through firebase directly should delete product",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(productId).to.exist;\nawait deleteProduct(productId);\ntry {\n    await getProductById(productId);\n    throw new Error(\"Product still exists after deletion\");\n}\ncatch (err) {\n    expect(err.message).to.include(\"Product not found\");\n}",
              "err": {},
              "uuid": "54991723-2120-4d48-9244-a8063265d763",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete the same product again",
              "fullTitle": "Testing product functionality through firebase directly should fail to delete the same product again",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await deleteProduct(productId);\n    throw new Error(\"Expected deleteProduct to throw, but it succeeded\");\n}\ncatch (error) {\n    expect(error).to.exist;\n}",
              "err": {},
              "uuid": "930015c4-6d71-4785-b654-bceb54b81fad",
              "parentUUID": "9c39ffd6-6710-4052-8f07-b25dbd18f30d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3af15b8e-e222-40ed-97b0-d73b03f2582f",
            "8e73b681-ebff-4791-98ab-087ae28b11f4",
            "eaf1d91f-1a50-4657-bfbd-426e718924c6",
            "2d31557a-75d0-4ef6-8a26-557a7694cd86",
            "d04fa11d-b3cd-4ff4-b075-ee3740c08acb",
            "62a5559d-9b3a-4bb0-847b-0e1c7baabfbd",
            "b24099fa-cc66-45e6-a4e0-ac7f8e1a72db",
            "54991723-2120-4d48-9244-a8063265d763",
            "930015c4-6d71-4785-b654-bceb54b81fad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 673,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}