{
  "stats": {
    "suites": 3,
    "tests": 31,
    "passes": 31,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-19T04:59:01.812Z",
    "end": "2025-07-19T04:59:08.789Z",
    "duration": 6977,
    "testsRegistered": 31,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f95be56c-ee16-4f9d-b7b7-e7a0aa6ef8e4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Initialize Firebase Admin SDK (only once)\nif (!getAdminApps().length) {\n\tinitAdminApp({\n\t\tcredential: cert(\n\t\t\tpath.join(__dirname, \"../config/firebase-service-account.json\")\n\t\t),\n\t\tprojectId: \"flipper-ae6d1\",\n\t});\n\tconsole.log(\"âœ… Firebase Admin SDK initialized\");\n}",
          "err": {},
          "uuid": "056938d0-6755-418b-a3dc-e3f7247adfc1",
          "parentUUID": "f95be56c-ee16-4f9d-b7b7-e7a0aa6ef8e4",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Clean up Admin SDK apps\nfor (const app of getAdminApps()) {\n\tawait deleteApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Admin SDK apps deleted\");\n// Delete Firebase Client SDK apps\nfor (const app of getClientApps()) {\n\tawait deleteClientApp(app);\n}\nconsole.log(\"ðŸ§¹ Firebase Client SDK apps deleted\");",
          "err": {},
          "uuid": "4e4a3b11-d85c-4dcb-876f-c165566a7eb3",
          "parentUUID": "f95be56c-ee16-4f9d-b7b7-e7a0aa6ef8e4",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
          "title": "Testing product functionality through API routes",
          "fullFile": "/Users/janieholzmann/Documents/cpsc-455-group/src/backend/tests/integration/api-products.test.ts",
          "file": "/src/backend/tests/integration/api-products.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"before each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "fea7ff8a-0963-4c89-95c6-5d1c410ef29c",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through API routes\"",
              "fullTitle": "Testing product functionality through API routes \"after each\" hook in \"Testing product functionality through API routes\"",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "930ee42c-398a-4d1a-8cd3-7a98e188151a",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add product",
              "fullTitle": "Testing product functionality through API routes should add product",
              "timedOut": false,
              "duration": 133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testProductNew = {\n    name: \"Another Test Chair\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n};\nconst res = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst newProduct = res.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nexpect(newProduct.name).to.equal(\"Another Test Chair\");\nexpect(newProduct.createdAt).to.exist;\nexpect(newProduct.updatedAt).to.exist;\nexpect(newProduct.id).to.exist;",
              "err": {},
              "uuid": "b84f8dfb-20d7-4e3c-8136-e348941b9fbc",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through API routes should fetch all products",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(\"/api/products\");\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "5a8de533-81f5-456c-9668-97ebac9c2aac",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get product by product ID",
              "fullTitle": "Testing product functionality through API routes should get product by product ID",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(res.status).to.equal(200);\nconst fetchedProduct = res.body;\nexpect(fetchedProduct).to.exist;\nexpect(fetchedProduct.id).to.equal(productId);",
              "err": {},
              "uuid": "b6acfcf6-df4c-4659-8564-1835885fecd9",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by category ID",
              "fullTitle": "Testing product functionality through API routes should get products by category ID",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-category/${testCategoryId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "ff2eef45-b88c-46d6-9c87-9e087850fef8",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by seller ID",
              "fullTitle": "Testing product functionality through API routes should get products by seller ID",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/products/by-seller-id/${testProduct.sellerId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "9823591e-de86-4c99-b760-e212743123b4",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products by tag",
              "fullTitle": "Testing product functionality through API routes should get products by tag",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const tag = testProduct.tags[0];\nconst res = await request(app).get(`/api/products/by-tag/${tag}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nexpect(res.body.length).to.be.gte(1);",
              "err": {},
              "uuid": "a60fed87-3a43-4fdd-baee-c75b7f072eff",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search product by 'chair'",
              "fullTitle": "Testing product functionality through API routes should search product by 'chair'",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .get(\"/api/products/search-products\")\n    .query({ input: \"chair\" });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");\nconst found = res.body.some((p) => p.name.toLowerCase().includes(\"chair\"));\nexpect(found).to.be.true;",
              "err": {},
              "uuid": "6fe232f7-ab1e-4619-ac5b-1a1fb232957d",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update price and status",
              "fullTitle": "Testing product functionality through API routes should update price and status",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { updates: { status: \"Sold\", price: 3.99 } };\nconst res = await request(app)\n    .patch(`/api/products/by-id/${productId}`)\n    .send(updates)\n    .set(\"Accept\", \"application/json\");\nexpect(res.status).to.equal(200);\nconst updatedProduct = res.body;\nexpect(updatedProduct.price).to.equal(3.99);\nexpect(updatedProduct.status).to.equal(\"Sold\");",
              "err": {},
              "uuid": "54e8beab-8b0f-4bd8-b195-f3149ed7d016",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through API routes should delete product",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"product ID (test): \", productId);\nconst deleteRes = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes.status).to.equal(204);\nconst getRes = await request(app).get(`/api/products/by-id/${productId}`);\nexpect(getRes.status).to.equal(404);",
              "err": {},
              "uuid": "f7bd2ab8-be3d-4327-893b-c9aeaee4f347",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete same product twice",
              "fullTitle": "Testing product functionality through API routes should fail to delete same product twice",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// First delete\nconst deleteRes1 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes1.status).to.equal(204);\nconst deleteRes2 = await request(app).delete(`/api/products/by-id/${productId}`);\nexpect(deleteRes2.status).to.equal(404);",
              "err": {},
              "uuid": "f981a493-b64c-4460-b1ed-22851a775938",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place bid on auctioned item",
              "fullTitle": "Testing product functionality through API routes should place bid on auctioned item",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 0.0,\n    bidCount: 0,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\nconst resBid = await request(app)\n    .post(`/api/bids/${newProduct.id}/bid`)\n    .send({\n    amount: 50.0,\n    userId: \"user123\",\n})\n    .set(\"Accept\", \"application/json\");\nexpect(resBid.status).to.equal(200);\nconst auctionedProduct = resBid.body;\nif (!auctionedProduct) {\n    throw new Error(\"Auctioned product should exist!\");\n}\nexpect(auctionedProduct.currentBid).to.equal(50.0);\nexpect(auctionedProduct.bidderId).to.equal(\"user123\");\nexpect(auctionedProduct.bidCount).to.equal(1);",
              "err": {},
              "uuid": "7fc4cc0d-581f-4abe-a784-4178be71f944",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid less than current bid",
              "fullTitle": "Testing product functionality through API routes should not be able to bid less than current bid",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: true,\n    startingBid: 49.99,\n    currentBid: 60.0,\n    bidCount: 3,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "e1168e07-572d-47aa-81b6-c195de7a5ec2",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to bid on non-auctionable product",
              "fullTitle": "Testing product functionality through API routes should not be able to bid on non-auctionable product",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//\nconst testProductNew = {\n    name: \"Another Test Chair (Auctionable)\",\n    description: \"A comfy test chair\",\n    price: 49.99,\n    sellerId: \"user123\",\n    status: \"For Sale\",\n    tags: [\"test\", \"chair\"],\n    categories: [Category.Accessories],\n    images: [\"\"],\n    embedding: [],\n    condition: \"New\",\n    location: testLocation,\n    attributes: [testAttribute],\n    priceComparisons: [],\n    isAuction: false,\n};\nconst resAdd = await request(app)\n    .post(\"/api/products\")\n    .send({ product: testProductNew })\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\nexpect(resAdd.status).to.equal(200);\nconst newProduct = resAdd.body;\nif (newProduct)\n    productIds.push(newProduct.id);\ntry {\n    const resBid = await request(app)\n        .post(`/api/bids/${newProduct.id}/bid`)\n        .send({\n        amount: 50.0,\n        userId: \"user123\",\n    })\n        .set(\"Accept\", \"application/json\");\n    expect(resBid.status).to.equal(400);\n}\ncatch (error) {\n    // pass!\n}",
              "err": {},
              "uuid": "04f3e1f6-2b7a-46bf-bad8-4c53e204e0ba",
              "parentUUID": "36ce3071-784e-4d7a-a1ce-1c1f70d1f73e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b84f8dfb-20d7-4e3c-8136-e348941b9fbc",
            "5a8de533-81f5-456c-9668-97ebac9c2aac",
            "b6acfcf6-df4c-4659-8564-1835885fecd9",
            "ff2eef45-b88c-46d6-9c87-9e087850fef8",
            "9823591e-de86-4c99-b760-e212743123b4",
            "a60fed87-3a43-4fdd-baee-c75b7f072eff",
            "6fe232f7-ab1e-4619-ac5b-1a1fb232957d",
            "54e8beab-8b0f-4bd8-b195-f3149ed7d016",
            "f7bd2ab8-be3d-4327-893b-c9aeaee4f347",
            "f981a493-b64c-4460-b1ed-22851a775938",
            "7fc4cc0d-581f-4abe-a784-4178be71f944",
            "e1168e07-572d-47aa-81b6-c195de7a5ec2",
            "04f3e1f6-2b7a-46bf-bad8-4c53e204e0ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3d8dba63-fe84-4573-ac66-849afc980dd5",
          "title": "User Routes (with auth)",
          "fullFile": "/Users/janieholzmann/Documents/cpsc-455-group/src/backend/tests/integration/api-user.test.ts",
          "file": "/src/backend/tests/integration/api-user.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"before all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 939,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000);\nif (!getAdminApps().length) {\n    // Only initialize if not initialized yet, with projectId here if you want\n    initAdminApp({\n        credential: cert(path.join(__dirname, \"../config/firebase-service-account.json\")),\n        projectId: \"flipper-ae6d1\",\n    });\n}\nconst adminAuth = admin.auth();\nconst userRecord = await adminAuth.createUser({\n    email: testUser.email,\n    password: \"testpassword\",\n    displayName: testUser.name,\n});\ntestUserId = userRecord.uid;\ntestUser.id = testUserId;\nconst customToken = await adminAuth.createCustomToken(testUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ token: customToken, returnSecureToken: true }),\n});\nconst data = (await response.json());\nidToken = data.idToken;",
              "err": {},
              "uuid": "8c1389cb-5a7f-434a-97e3-5117ba393994",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"User Routes (with auth)\"",
              "fullTitle": "User Routes (with auth) \"after all\" hook in \"User Routes (with auth)\"",
              "timedOut": false,
              "duration": 407,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (createdUserId)\n    await admin.auth().deleteUser(createdUserId).catch(console.error);\nif (testUserId)\n    await admin.auth().deleteUser(testUserId).catch(console.error);",
              "err": {},
              "uuid": "c39c03e8-8628-4862-8d0a-ab9ffff7cc9d",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a user (POST /users) with auth",
              "fullTitle": "User Routes (with auth) should create a user (POST /users) with auth",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ user: testUser });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);\ncreatedUserId = res.body.id;",
              "err": {},
              "uuid": "7d16641d-9153-424a-b8d9-18f1608db5ce",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by id (PUT /users/get-or-create/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get user by id (PUT /users/get-or-create/:userId) without auth",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).put(`/api/users/get-or-create/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property(\"id\", testUserId);",
              "err": {},
              "uuid": "56f149da-ec6b-499f-b463-c0f3727b9e4a",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user info (PATCH /users/by-id/:userId) with auth",
              "fullTitle": "User Routes (with auth) should update user info (PATCH /users/by-id/:userId) with auth",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Updated bio\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`)\n    .send({ updates });\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "dca03726-4be9-4246-b43c-5b71eee8c301",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT update user info with invalid auth",
              "fullTitle": "User Routes (with auth) should NOT update user info with invalid auth",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updates = { bio: \"Fail update\" };\nconst res = await request(app)\n    .patch(`/api/users/by-id/${testUserId}`)\n    .set(\"Authorization\", `Bearer invalidtoken`)\n    .send({ updates });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "eace66b5-7cbc-46a1-8cd0-2e418b9c41e6",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "fullTitle": "User Routes (with auth) should add product to wishlist (PUT /users/wishlist/by-user-and-product-id/:userId/:productId)",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dummyProductId = \"dummy-product-id\";\nconst res = await request(app)\n    .put(`/api/users/wishlist/by-user-and-product-id/${testUserId}/${dummyProductId}`)\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "ba5e1ba2-5988-49d4-9fb3-09535ca6b0fd",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "fullTitle": "User Routes (with auth) should get wishlist (GET /users/wishlist/by-user-id/:userId) without auth",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get(`/api/users/wishlist/by-user-id/${testUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an(\"array\");",
              "err": {},
              "uuid": "f80f4a89-9c71-4d5b-b7aa-cb6b876bb9eb",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user (DELETE /users) with auth",
              "fullTitle": "User Routes (with auth) should delete user (DELETE /users) with auth",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .delete(\"/api/users\")\n    .set(\"Authorization\", `Bearer ${idToken}`);\nexpect(res.status).to.equal(200);",
              "err": {},
              "uuid": "c34790d6-a27a-42ab-b155-69487255daf9",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not delete user (DELETE /users) without auth",
              "fullTitle": "User Routes (with auth) should not delete user (DELETE /users) without auth",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const res = await request(app).delete(\"/api/users\");\n    expect(res.status).to.equal(403);\n}\ncatch (error) {\n    // pass\n}",
              "err": {},
              "uuid": "b9703d9a-e94a-4d7b-b00f-936213e28db1",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get recommendations for user",
              "fullTitle": "User Routes (with auth) should get recommendations for user",
              "timedOut": false,
              "duration": 772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const thisTestUserId = \"user_001\";\nconst adminAuth = admin.auth();\nconst customToken = await adminAuth.createCustomToken(thisTestUserId);\nconst fetch = (await import(\"node-fetch\")).default;\nconst apiKey = firebaseConfig.apiKey;\nconst response = await fetch(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=${apiKey}`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n        token: customToken,\n        returnSecureToken: true,\n    }),\n});\nconst data = (await response.json());\nconst thisCustomToken = data.idToken;\n// const thisCustomToken =\n// \t\"eyJhbGciOiJSUzI1NiIsImtpZCI6ImE4ZGY2MmQzYTBhNDRlM2RmY2RjYWZjNmRhMTM4Mzc3NDU5ZjliMDEiLCJ0eXAiOiJKV1QifQ.eyJuYW1lIjoiQWxpY2UgSm9obnNvbiIsImlzcyI6Imh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS9mbGlwcGVyLWFlNmQxIiwiYXVkIjoiZmxpcHBlci1hZTZkMSIsImF1dGhfdGltZSI6MTc1Mjg3NjgyNywidXNlcl9pZCI6InVzZXJfMDAxIiwic3ViIjoidXNlcl8wMDEiLCJpYXQiOjE3NTI4NzY4MjcsImV4cCI6MTc1Mjg4MDQyNywiZW1haWwiOiJhbGljZS5qb2huc29uQGV4YW1wbGUuY29tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJmaXJlYmFzZSI6eyJpZGVudGl0aWVzIjp7ImVtYWlsIjpbImFsaWNlLmpvaG5zb25AZXhhbXBsZS5jb20iXX0sInNpZ25faW5fcHJvdmlkZXIiOiJwYXNzd29yZCJ9fQ.xpOIqJEsowtlGaT3A1eFAADMsVrphiySw1lUocmOSd_a2EGBNaUBG0Mc1qDbWFBeJU_0LlvSg0U37c8Gg_DA9j8IRSfS62IDFoAtqQuS5zzAC1Z6sBIqxDQKF71xK-mYlLnzcom8S1rY_mX5JWC0wEkIEcpulw3X2WQzXS2tGiJZnEDeYUxtxRQgIth1SukJssd1vqmjttdsZrCf_h_lTpha5BTPVBHmiJNSPUZYm_2Fnq3iMD_YUr4c8Bx4xuHTJT88DjnjyK3du2B2mnx0QRjn8YMVcNBAGhWoAyKrt46TBd7WNFDOdOyldir4NfhrMLLD7WB8ZmUW83NLytwqvw\";\ntry {\n    const res = await request(app)\n        .get(`/api/recommendations/${thisTestUserId}`)\n        .set(\"Authorization\", `Bearer ${thisCustomToken}`);\n    expect(res.status).to.equal(200);\n}\ncatch (_err) {\n    throw new Error(\"this shouldn't happen :(\");\n}",
              "err": {},
              "uuid": "bd45f203-38df-4d62-9bf5-3ed20b8eea39",
              "parentUUID": "3d8dba63-fe84-4573-ac66-849afc980dd5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d16641d-9153-424a-b8d9-18f1608db5ce",
            "56f149da-ec6b-499f-b463-c0f3727b9e4a",
            "dca03726-4be9-4246-b43c-5b71eee8c301",
            "eace66b5-7cbc-46a1-8cd0-2e418b9c41e6",
            "ba5e1ba2-5988-49d4-9fb3-09535ca6b0fd",
            "f80f4a89-9c71-4d5b-b7aa-cb6b876bb9eb",
            "c34790d6-a27a-42ab-b155-69487255daf9",
            "b9703d9a-e94a-4d7b-b00f-936213e28db1",
            "bd45f203-38df-4d62-9bf5-3ed20b8eea39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "da4a3006-81f7-41c3-bf07-588873037813",
          "title": "Testing product functionality through firebase directly",
          "fullFile": "/Users/janieholzmann/Documents/cpsc-455-group/src/backend/tests/integration/firebase-product.test.ts",
          "file": "/src/backend/tests/integration/firebase-product.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"before each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 59,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "product = await addProduct(testProduct);\nproductId = product.id;\nproductIds.push(productId);",
              "err": {},
              "uuid": "c2bf6ac4-2211-4d74-9ca0-2eb4a121bb55",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testing product functionality through firebase directly\"",
              "fullTitle": "Testing product functionality through firebase directly \"after each\" hook in \"Testing product functionality through firebase directly\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all(productIds.map((id) => deleteProduct(id)));\nproductIds.length = 0; // clear the array",
              "err": {},
              "uuid": "811c32a4-f1c2-404c-b186-c3e95fe9cd07",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should add a product",
              "fullTitle": "Testing product functionality through firebase directly should add a product",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    expect(productId).to.exist;\n}\ncatch (err) {\n    throw new Error(`Error adding product: ${err.message}`);\n}",
              "err": {},
              "uuid": "0fc80580-51c1-472f-83ee-b07a30787a9d",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch product by ID",
              "fullTitle": "Testing product functionality through firebase directly should fetch product by ID",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    let fetchedProduct = await getProductById(productId);\n    expect(fetchedProduct).to.exist;\n    expect(fetchedProduct.name).to.equal(testProduct.name);\n}\ncatch (err) {\n    throw new Error(`Error fetching by ID: ${err.message}`);\n}",
              "err": {},
              "uuid": "1cd01421-5d22-4c86-a12c-2e2080e88e11",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all products",
              "fullTitle": "Testing product functionality through firebase directly should fetch all products",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const product2 = await addProduct(testProduct);\n    const productId2 = product2.id;\n    productIds.push(productId2);\n    const products = await getAllProducts();\n    expect(products).to.be.an(\"array\");\n    expect(products.length).to.be.gte(2);\n}\ncatch (err) {\n    throw new Error(`Error fetching all products: ${err.message}`);\n}",
              "err": {},
              "uuid": "21da69de-07f9-43e2-bee8-e8b69966e60d",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should search products with 'chair'",
              "fullTitle": "Testing product functionality through firebase directly should search products with 'chair'",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const results = await searchProducts(\"chair\");\n    expect(results).to.be.an(\"array\");\n    expect(results.some((p) => p.name.toLowerCase().includes(\"chair\"))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error searching products: ${err.message}`);\n}",
              "err": {},
              "uuid": "fdac6d3e-ec7b-4010-a8a5-006ecff6920b",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products in category 'Accessories'",
              "fullTitle": "Testing product functionality through firebase directly should get products in category 'Accessories'",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    const products = await getProductsInCategory(testCategoryId);\n    expect(products).to.be.an(\"array\");\n    expect(products.some((p) => p.categories.includes(testCategoryId))).to.be\n        .true;\n}\ncatch (err) {\n    throw new Error(`Error fetching products in category: ${err.message}`);\n}",
              "err": {},
              "uuid": "75be833e-f669-4f08-be26-c510ea15d5bd",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product price",
              "fullTitle": "Testing product functionality through firebase directly should update product price",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { price: 59.99 });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.price).to.equal(59.99);\n}\ncatch (err) {\n    throw new Error(`Error updating price: ${err.message}`);\n}",
              "err": {},
              "uuid": "144a7271-960d-493b-aaf5-6b4158276b99",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update product status",
              "fullTitle": "Testing product functionality through firebase directly should update product status",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await updateProduct(productId, { status: \"Sold\" });\n    const updatedProduct = await getProductById(productId);\n    expect(updatedProduct.status).to.equal(\"Sold\");\n}\ncatch (err) {\n    throw new Error(`Error updating status: ${err.message}`);\n}",
              "err": {},
              "uuid": "aaa00cd0-88e0-46a8-9ece-06644ce4164f",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete product",
              "fullTitle": "Testing product functionality through firebase directly should delete product",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(productId).to.exist;\nawait deleteProduct(productId);\ntry {\n    await getProductById(productId);\n    throw new Error(\"Product still exists after deletion\");\n}\ncatch (err) {\n    expect(err.message).to.include(\"Product not found\");\n}",
              "err": {},
              "uuid": "57f7b9d2-1d03-40e5-bff5-53e07d6b70f5",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete the same product again",
              "fullTitle": "Testing product functionality through firebase directly should fail to delete the same product again",
              "timedOut": false,
              "duration": 160,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await deleteProduct(productId);\n    throw new Error(\"Expected deleteProduct to throw, but it succeeded\");\n}\ncatch (error) {\n    expect(error).to.exist;\n}",
              "err": {},
              "uuid": "d1086004-a9d9-4d82-a9dd-7b71b79f017b",
              "parentUUID": "da4a3006-81f7-41c3-bf07-588873037813",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0fc80580-51c1-472f-83ee-b07a30787a9d",
            "1cd01421-5d22-4c86-a12c-2e2080e88e11",
            "21da69de-07f9-43e2-bee8-e8b69966e60d",
            "fdac6d3e-ec7b-4010-a8a5-006ecff6920b",
            "75be833e-f669-4f08-be26-c510ea15d5bd",
            "144a7271-960d-493b-aaf5-6b4158276b99",
            "aaa00cd0-88e0-46a8-9ece-06644ce4164f",
            "57f7b9d2-1d03-40e5-bff5-53e07d6b70f5",
            "d1086004-a9d9-4d82-a9dd-7b71b79f017b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 647,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}